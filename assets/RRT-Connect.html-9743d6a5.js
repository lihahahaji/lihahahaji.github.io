import{_ as o,r,o as c,c as s,a as n,b as t,d as l,e as i}from"./app-d1c0f0b2.js";const a={},p=n("h1",{id:"rrt-connect",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rrt-connect","aria-hidden":"true"},"#"),t(" RRT Connect")],-1),_=n("p",null,"参考文献:",-1),d={href:"https://blog.csdn.net/weixin_42301220/article/details/125267028",target:"_blank",rel:"noopener noreferrer"},g=i('<p>RRT-Connect在RRT的基础上引入了双树扩展环节，分别<strong>以起点和目标点为根节点生成两棵树进行双向扩展</strong>，当两棵树建立连接时可认为路径规划成功。</p><p><img src="https://img-blog.csdnimg.cn/20210503082014727.gif#pic_center" alt="在这里插入图片描述"></p><p>算法步骤：</p><ol><li><p><strong>初始化</strong>：算法开始时，创建两个包含起点和目标点的树，分别为起始树和目标树。这两棵树各自只有一个节点。</p></li><li><p><strong>交替扩展</strong>：RRT-Connect的关键特点是交替扩展两棵树。在每个迭代中，选择一棵树进行扩展，以尝试将这棵树的节点连接到另一棵树上。这个过程交替进行，直到找到一条连接起点和目标点的路径或达到最大迭代次数。</p></li><li><p><strong>随机采样</strong>：在每个迭代中，随机采样一个点，通常在配置空间中选择一个潜在的目标点。然后，选择要扩展的树，该选择通常基于两棵树中节点距离目标点最近的那棵树。</p></li><li><p><strong>树扩展</strong>：选定要扩展的树后，尝试沿着连接选定树的节点和随机采样点的路径来扩展树。这个扩展过程会涉及碰撞检测，以确保路径不会与障碍物相交。如果路径是合法的，就将新的节点添加到树中。</p></li><li><p><strong>连接检查</strong>：在每个迭代中，还要检查是否已经找到了连接起点和目标点的路径。如果一棵树的节点与另一棵树的节点距离足够近，算法认为已经找到了一条可行路径。</p></li><li><p><strong>路径回溯</strong>：如果已找到连接起点和目标点的路径，就可以通过回溯两棵树中的节点来提取这条路径。</p></li></ol><p>RRT-Connect算法的优势在于它在搜索可行路径时表现出色，特别适用于高维和复杂的配置空间。由于它是一种连接性的方法，因此可以快速找到路径，而不需要进行大量的随机采样。</p>',5);function R(h,f){const e=r("ExternalLinkIcon");return c(),s("div",null,[p,n("blockquote",null,[_,n("p",null,[n("a",d,[t("基于采样的路径规划算法——RRT-Connect"),l(e)])])]),g])}const u=o(a,[["render",R],["__file","RRT-Connect.html.vue"]]);export{u as default};
