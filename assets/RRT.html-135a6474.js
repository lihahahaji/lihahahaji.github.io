import{_ as d,r as e,o as _,c as h,a as s,b as l,d as n,w as a,e as o}from"./app-d1c0f0b2.js";const E="/assets/image-20230919162554600-9e2e9198.png",F="/assets/image-20230919162633837-43128d78.png",y="/assets/image-20230919163557481-7c44549b.png",g={},D=s("h1",{id:"rrt",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#rrt","aria-hidden":"true"},"#"),l(" RRT")],-1),v=s("p",null,"快速随机搜索树",-1),f=s("p",null,"参考文献",-1),b={href:"https://zhuanlan.zhihu.com/p/66047152",target:"_blank",rel:"noopener noreferrer"},C=s("p",null,"使用随机采样和树来寻找从起点到目标点的可行路径",-1),k=s("p",null,"算法步骤:",-1),x=o(`<li><p><strong>初始化</strong>：算法开始时，创建一个包含起点的树，这个树只有一个节点。</p><blockquote><p>确定初始点和目标点</p></blockquote></li><li><p><strong>随机采样</strong>：从配置空间中随机生成一个点，通常是目标点或一些离散的点。这个点用于扩展当前的树。</p><blockquote><p>有一定的概率直接将目标点作为采样点 (向目标点延伸)</p><p>有一定概率随机生成一个采样点(向随机方向延伸)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki nord" style="background-color:#2e3440ff;" tabindex="0"><code><span class="line"><span style="color:#616E88;"># 利用rand()函数在[0,1]区间内随机生成一个数</span></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> np</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">random</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">rand</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0.5</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;"> </span><span style="color:#616E88;"># 如果小于0.5，则在图 img_binary 的范围内随机采样一个点</span></span>
<span class="line"><span style="color:#D8DEE9FF;"> sample </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> np</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">mat</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">np</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">random</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">randint</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span></span>
<span class="line"><span style="color:#D8DEE9FF;">                                   img_binary</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">shape</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">-</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span></span>
<span class="line"><span style="color:#D8DEE9FF;">                                   </span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">)))</span></span>
<span class="line"><span style="color:#81A1C1;">else</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;"> </span><span style="color:#616E88;"># 否则用目标点作为采样点</span></span>
<span class="line"><span style="color:#D8DEE9FF;"> sample </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">point_goal</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li>`,2),w=s("strong",null,"树扩展",-1),A={class:"katex"},q={class:"katex-mathml"},R=o('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>',1),B={class:"katex"},z={class:"katex-mathml"},M=o('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>',1),T=s("blockquote",null,[s("ol",null,[s("li",null,"选择当前树中距离采样点最近的那个点"),s("li",null,"沿着采样点连线方向延伸一段距离(生长步长)"),s("li",null,"判断延伸后的点是否会发生碰撞(碰撞检测)"),s("li",null,"若路径合法, 将该新节点添加到树中")])],-1),X=s("p",null,[s("img",{src:E,alt:"image-20230919162554600"})],-1),L=s("p",null,[s("img",{src:F,alt:"image-20230919162633837"})],-1),N=s("li",null,[s("p",null,[s("strong",null,"重复"),l("：不断重复随机采样和树扩展步骤，直到达到一定条件，比如找到一条可行路径或达到最大迭代次数。")]),s("blockquote",null,[s("p",null,"终止条件:"),s("ol",null,[s("li",null,"距离目标点达到一定范围内: 由于每次的生长步长是一定的, 所以不一定可以正好达到目标点, 所以一般设定一个阈值,当距离终点的距离小于这个阈值, 则表示路径规划成功"),s("li",null,"达到最大的采样次数: 由于目标点不一定是可达的, 所以设定一个采样上限, 一般达到采样上限仍然没有达到目标点的话, 则认为路径不可达.")])])],-1),V=s("li",null,[s("p",null,[s("strong",null,"路径回溯"),l("：如果在树的扩展过程中找到了一条从起点到目标点的路径，就可以通过回溯树中的节点来提取这条路径。")])],-1),I=o('<p>关于预设参数:</p><ol><li><p>随机采样概率: 在采样时选择随机采样点而不是选择目标点作为采样点的概率.</p><blockquote><p>概率越大, 树的分支越多, 搜索更全面, 但是显得没有方向性, 耗时较大.</p></blockquote><p>设随机采样的概率为1.0，采样上限20000次。可以看到，虽然规划得以成功，但由于生长缺乏方向性，其实是一种“碰运气”式的搜索。RRT树的分支填充了所有空间直至找到目标点。这样的搜索会消耗大量的时间。</p><p><img src="'+y+'" alt="image-20230919163557481"></p></li><li><p>生长步长 (每次延伸的长度)</p><blockquote><p>空间越复杂, 一般来说步长应该越小, 速度也就越慢</p></blockquote></li><li><p>采样上限(最大采样次数)</p></li></ol>',2);function S(j,G){const u=e("ExternalLinkIcon"),t=e("mi"),p=e("mrow"),c=e("msub"),i=e("annotation"),r=e("semantics"),m=e("math");return _(),h("div",null,[D,v,s("blockquote",null,[f,s("p",null,[s("a",b,[l("【机器人路径规划】快速扩展随机树(RRT)算法"),n(u)])])]),C,k,s("ol",null,[x,s("li",null,[s("p",null,[w,l("：选择当前树中距离随机采样点最近的节点"),s("span",A,[s("span",q,[n(m,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(r,null,{default:a(()=>[n(p,null,{default:a(()=>[n(c,null,{default:a(()=>[n(t,null,{default:a(()=>[l("X")]),_:1}),n(p,null,{default:a(()=>[n(t,null,{default:a(()=>[l("n")]),_:1}),n(t,null,{default:a(()=>[l("e")]),_:1}),n(t,null,{default:a(()=>[l("a")]),_:1}),n(t,null,{default:a(()=>[l("r")]),_:1})]),_:1})]),_:1})]),_:1}),n(i,{encoding:"application/x-tex"},{default:a(()=>[l("X_{near}")]),_:1})]),_:1})]),_:1})]),R]),l("，然后尝试沿着连接这个节点和随机采样点的路径来扩展树。这个扩展过程涉及计算碰撞检测，以确保路径不会与障碍物相交。如果路径是合法的，就将新的节点"),s("span",B,[s("span",z,[n(m,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(r,null,{default:a(()=>[n(p,null,{default:a(()=>[n(c,null,{default:a(()=>[n(t,null,{default:a(()=>[l("X")]),_:1}),n(p,null,{default:a(()=>[n(t,null,{default:a(()=>[l("n")]),_:1}),n(t,null,{default:a(()=>[l("e")]),_:1}),n(t,null,{default:a(()=>[l("w")]),_:1})]),_:1})]),_:1})]),_:1}),n(i,{encoding:"application/x-tex"},{default:a(()=>[l("X_{new}")]),_:1})]),_:1})]),_:1})]),M]),l("添加到树中。")]),T,X,L]),N,V]),I])}const J=d(g,[["render",S],["__file","RRT.html.vue"]]);export{J as default};
